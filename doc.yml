openapi: 3.0.0
info:
  title: Users
  version: 0.0.1
  description: |
    # Introduction

    * Get information from all registered users
    * Get information from an specific user
    * Add Event
    * Add User
    * Update user
    * Update event
    * Delete event
    * Delete user
    * Validate authentication token
    * Validate if `alias` is available

    ## Configuration
    In config/config.json file
    ```
      {
        "mongo": { // Connection with MongoDB
          "enabled": true,
          "use_defaults": false,
          "host": "localhost",
          "port": 27017,
          "user": "",
          "pass": "",
          "db": "api_usuarios"
        },
        "redis": { // Connection with Redis
          "enabled": true,
          "use_defaults": false,
          "host": "localhost",
          "port": 6379,
          "user": "",
          "pass": "",
          "events_to_emmit": [
            {
              "stream": "users.user.created",
              "event_key": "userPost",
              "max_len": 100
            },
            {
              "stream": "users.user.updated",
              "event_key": "userPatch",
              "max_len": 100
            },
            {
              "stream": "users.user.deleted",
              "event_key": "userDelete",
              "max_len": 100
            },
            {
              "stream": "users.user.login",
              "event_key": "userLogin",
              "max_len": 100
            }
          ],
          "events_to_listen": [
            {
                "function": "permission/updated",
                "stream": "permissions.permission.updated",
                "last_id_key": "app.users.permission.updated"
            },
            {
                "function": "permission/deleted",
                "stream": "permissions.permission.deleted",
                "last_id_key": "app.users.permission.deleted"
            },
            {
                "function": "profile/updated",
                "stream": "profiles.profile.updated",
                "last_id_key": "app.users.profile.updated"
            },
            {
                "function": "profile/deleted",
                "stream": "profiles.profile.deleted",
                "last_id_key": "app.users.profile.deleted"
            }
          ]
        },
        "auth": {
          "jwt_secret_key": "", // Password to create and validate the json web token
          "jwt_exipire_time": "1h", // Time for the jwt to expire
          "login_data": "user_name", //"user_name" or "user_name_and_password"
          "user_name_type": "code", // Type of username, it can be "email", "phone_number" or "code", if it is "code" then user_name_min_length will be used.
          "user_name_min_length": 5, // Minimum number of characters of user_name, when user_name_type="code"
          "password_min_length": 5, // Minimum number of characters of password, when LOGIN_DATA="user_name_and_password"
          "multiple_sessions_setting_id": null // Multi-session setting id, it must match the application's multi-session setting
        },
        "api": {
          "port": 3000, // Port where server run
          "company_id_required": false, // Whether or not company identification is required
          "show_user_name": false // If you want to show the user_name then show_user_name=true, otherwise then show_user_name=false
        },
        "captcha":{
            "minutes_to_expire": 5, // Time in minutes for expiration of the captcha
        },
        "mail_validation":{
          "notify_email_host": "http://localhost:5007",
          "subject": "Email validation",
          "pool": "APP"
        }
      }
      ```

servers:
  - url: http://localhost:port
    description: For development mode
  - url: http://container_name:port
    description: If used as a container
  - url: http://example-domain.extension
    description: If used as a domain

x-tagGroups:
  - name: General
    tags:
      - Auth
      - CRUD users
      - CRUD events
      - Authorize actions
      - Recovery password
      - Validators
  - name: Redis
    tags:
      - Events to emmit

tags:
  - name: Events to emmit
    description: |
      ### User created: `userPost`, User updated: `userPatch` or User logged in: `userLogin`
      Content sended with this events
      <table>
        <tr> <th> Data </th>                  <th> Type </th>    </tr>
        <tr> <td> _id </td>                   <td> string </td>  </tr>
        <tr> <td> company_id </td>            <td> string </td>  </tr>
        <tr> <td> account_id </td>            <td> string </td>  </tr>
        <tr> <td> name </td>                  <td> string </td>  </tr>
        <tr> <td> first_surname </td>         <td> string </td>  </tr>
        <tr> <td> second_surname </td>        <td> string </td>  </tr>
        <tr> <td> gender </td>                <td> string </td>  </tr>
        <tr> <td> user_name </td>             <td> string </td>  </tr>
        <tr> <td> password_change_date </td>  <td> date </td>    </tr>
        <tr> <td> authorize_code </td>        <td> string </td>  </tr>
        <tr> <td> thumbnail_image_name </td>  <td> string </td>  </tr>
        <tr> <td> thumbnail_image_url </td>   <td> string </td>  </tr>
        <tr> <td> image_name </td>            <td> string </td>  </tr>
        <tr> <td> image_url </td>             <td> string </td>  </tr>
        <tr> <td> validation_code </td>       <td> string </td>  </tr>
        <tr> <td> validated </td>             <td> boolean </td> </tr>
        <tr> <td> validation_date </td>       <td> date </td>    </tr>
        <tr> <td> authorize </td>             <td> string </td>  </tr>
        <tr> <td> root </td>                  <td> boolean </td> </tr>
        <tr> <td> permissions </td>           <td> array </td>   </tr>
        <tr> <td> profiles </td>              <td> array </td>   </tr>
        <tr> <td> check_in_require </td>      <td> string </td>  </tr>
        <tr> <td> last_check_in </td>         <td> string </td>  </tr>
        <tr> <td> active </td>                <td> boolean </td> </tr>
        <tr> <td> last_login </td>            <td> date </td>    </tr>
        <tr> <td> session_expire </td>        <td> date </td>    </tr>
        <tr> <td> created_by </td>            <td> object </td>  </tr>
        <tr> <td> updated_by </td>            <td> object </td>  </tr>
        <tr> <td> created_at </td>            <td> date </td>    </tr>
        <tr> <td> updated_at </td>            <td> date </td>    </tr>
        <tr> <td> deleted_at </td>            <td> date </td>    </tr>
      </table>
      
      ### User deleted: `userDelete`
      Content sended with this event
      <table>
        <tr> <th> Data </th>                  <th> Type </th>    </tr>
        <tr> <td> _id </td>                   <td> string </td>  </tr>
      </table>
paths:
  /user-name-available:
    # VALIDATE IF USER NAME IS AVAILABLE
    get:
      tags:
        - Validators
      summary: Validate if user_name is available
      parameters:
        - name: user_name
          in: query
          description: User name to validate if is available or not
          schema:
            type: string
      responses:
        "200":
          description: User name available
          content:
            application/json:
              schema:
                type: object
                example: {msg: "OK", msg_es: "OK"}
        "400":
          $ref: "#/components/responses/400"
  /users/register:
    # REGISTER A NEW USER
    post:
      tags:
        - CRUD users
      summary: Register
      description: |
        This path is used when the **first user is going to register**, or when the application **allows registration by users**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserToCreate"
      responses:
        "200":
          description: Successfull login
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/UserToken"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "410":
          $ref: "#/components/responses/410"
  /auth/login:
    # LOGIN
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/LOGIN_DATA=user_name_and_password"
                - $ref: "#/components/schemas/LOGIN_DATA=user_name"
      responses:
        "200":
          description: Successfull login
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/UserToken"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        # "410":
        #   $ref: "#/components/responses/410"
  /auth/check-in:
    # Check in 
    post:
      tags:
        - Auth
      summary: Check in
      responses:
        "200":
          description: Successfull check-in
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "410":
          $ref: "#/components/responses/410"
  /auth/logout:
    # LOGOUT
    post:
      tags:
        - Auth
      summary: Logout
      responses:
        "200":
          description: Successfull logout
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "410":
          $ref: "#/components/responses/410"
  /auth/validate:
    # VALIDATE JWT
    get:
      tags:
        - Auth
      summary: JWT validate
      parameters:
        - name: x-token
          in: header
          description: JSON web token to auth
          schema:
            type: string
        - name: permissions
          in: query
          description: |
            `Optional` Array of permissions id to validate
          schema:
            type: array
      responses:
        "200":
          description: JWT is valid
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
  /users:
    # SAVE A NEW USER
    post:
      tags:
        - CRUD users
      summary: Add a user
      description: |
        This path is used when a user registration is required to be done by **another logged in user**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserToCreate"
      responses:
        "201":
          description: User was created
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
  # GET ALL USERS
    get:
      tags:
        - CRUD users
      summary: Get a list of users
      parameters:
        - name: limit
          $ref: "#/components/parameters/limitParam"
        - name: from
          $ref: "#/components/parameters/fromParam"
        - name: search
          $ref: "#/components/parameters/searchParam"
        - name: search_fields
          $ref: "#/components/parameters/searchFieldsParam"
        - name: order_field
          $ref: "#/components/parameters/orderFieldParam"
        - name: order
          $ref: "#/components/parameters/orderParam"
        - name: active
          $ref: "#/components/parameters/activeParam"
        - name: root
          $ref: "#/components/parameters/rootParam"
        - name: exceptions
          $ref: "#/components/parameters/exceptionsParam"
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                example: { "msg": "", "msg_es": "", "count": 1, "users": [{}] }
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
  
  /events:
    # SAVE A NEW USER
    post:
      tags:
        - CRUD events
      summary: Add a event
      description: |
        This path is used when it's need **to create an event**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventToCreate"
      responses:
        "201":
          description: Event was created
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/Event"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
  # GET ALL USERS
    get:
      tags:
        - CRUD events
      summary: Get a list of events
      
      responses:
        "200":
          description: A list of events
          content:
            application/json:
              schema:
                type: object
                example: { "msg": "", "msg_es": "", "count": 1, "events": [{}] }
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"        
  # UPDATE EVENT
    patch:
      tags:
        - CRUD events
      summary: Update a event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventToUpdate"
      responses:
        "200":
          description: Event was updated
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/Event"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
  /users/{id}:
    # GET USER BY ID
    get:
      tags:
        - CRUD users
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to get
          schema:
            type: string
            format: Mongo ID
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "410":
          $ref: "#/components/responses/410"
    # UPDATE USER
    patch:
      tags:
        - CRUD users
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserToUpdate"
      responses:
        "200":
          description: User was updated
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
    # DELETE USER
    delete:
      tags:
        - CRUD users
      summary: Delete a user
      responses:
        "204":
          $ref: "#/components/responses/204User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
  /users/validate/{code}:
    # VALIDATE USER
    patch:
      tags:
        - CRUD users
      summary: Validate a user by code
      parameters:
        - name: code
          in: path
          required: true
          description: |
            Code for validate user, `validation_code` in user model.
          schema:
            type: string
      responses:
        "200":
          description: User validated
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
  /users/image/{id}:
    # UPLOAD USER IMAGE
    post:
      tags:
        - CRUD users
      summary: Upload user image
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to set image
          schema:
            type: string
            format: Mongo ID
      requestBody:
        required: true
        content:
          image:
            schema:
              type: string
              format: binary
              description: png, jpg, jpeg or gif
      responses:
        "200":
          description: Image uploaded
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
    # DELETE USER IMAGE
    delete:
      tags:
        - CRUD users
      summary: Delete user image
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete image
          schema:
            type: string
            format: Mongo ID
      responses:
        "204":
          $ref: "#/components/responses/204Image"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "410":
          $ref: "#/components/responses/410"
  /users/pass-recovery-code:
    # GET RECOVERY CODE
    post:
      tags:
        - Recovery password
      summary: Get password recovery code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRecoveryPassword"
      responses:
        "200":
          description: Code generated
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/UserCode"
        "400":
          $ref: "#/components/responses/400"
  /auth/reset/validate/{code}:
    # VALIDATE RECOVERY PASSWORD CODE
    get:
      tags:
        - Recovery password
      summary: Recovery password code validate
      parameters:
        - name: code
          in: query
          description: Recovery password code, created in `/users/pass-recovery-code`
          schema:
            type: string
      responses:
        "200":
          description: Valid and current code
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/Msgs"
        "400":
          $ref: "#/components/responses/400"
  /auth/reset/{code}:
    # RESET/UPDATE PASSWORD
    patch:
      tags:
        - Recovery password
      summary: Reset password
      parameters:
        - name: code
          in: query
          description: Reset password using code created in `/users/pass-recovery-code`
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
      responses:
        "200":
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/User"
        "400":
          $ref: "#/components/responses/400"
  /auth:
    # GENERATE A NEW JWT
    get:
      tags:
        - Auth
      summary: Get a new token
      responses:
        "200":
          description: New token is generated
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/UserToken"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "410":
          $ref: "#/components/responses/410"
  /users/authorize-validator:
    # Validar si el usuario puede autorizar una accion
    post:
      tags:
        - Authorize actions
      summary: Validate if the user can authorize an action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthorizeValidate"
      responses:
        "200":
          description: User authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  $ref: "#/components/examples/UserAuthorized"
        "400":
          $ref: "#/components/responses/400" 
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  
  /auth/generate-captcha:
    get:
      tags:
        - Auth
      summary: Generate a captcha 
      parameters:
        - name: base64
          in: query
          description: Generate the base64 data of the captcha image
          schema:
            type: string 
            example: " true "
            default: " false "
      responses:
        "200":
          description: Captcha generated
          $ref: "#/components/responses/200Captcha"

  /auth/validate-captcha:
    post:
      tags:
        - Auth
      summary: Validate captcha
      parameters:
        - in: query
          name: captcha_id
          description: Captcha ID to validate
          type: string
          example: "61a799a963e2f7b812689c00"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                captcha_text:
                  type: string
                  example: "527AD1"
                  description: Captcha text to compare in the DB
              example:
                {
                "captcha_text": "527AD1"
                }
      responses:
          "200":
            description: Captcha validated correctly
            content:
              application/json:
                schema:
                  type: object
                  example:
                    {
                      msg: "Captcha valid",
                      msg_es: "Captcha valido "
                    }
          "400":
            description: Captcha not valid
            content:
              application/json:
                schema:
                  type: object
                  example:
                    {
                      msg: "Captcha not valid",
                      msg_es: "Captcha no valido "
                    }

              


components:
  schemas:
    LOGIN_DATA=user_name_and_password:
      type: object
      properties:
        user_name:
          type: string
          example: ""
        password:
          type: string
          example: ""
    LOGIN_DATA=user_name:
      type: object
      properties:
        user_name:
          type: string
          example: ""
    UserRecoveryPassword:
      type: object
      properties:
        user_name:
          type: string
          format: email
          example: "jack_2021@mail.com"
        expires_in:
          type: number
          format: milliseconds
          default: 3600000
    User:
      type: object
      properties:
        _id:
          type: string
          example: "60f70d4a2ab4442c6012c8cd"
        company_id:
          type: string
          example: "123456789098765432123456"
        account_id:
          type: string
          example: "12345678909876543212345A"
        name:
          type: string
          example: "Jack"
        first_surname:
          type: string
          example: "Smith"
        second_surname:
          type: string
          example: null
        gender:
          type: string
          example: "H"
        user_name:
          type: string
          example: "jack_2021@mail.com"
        authorize:
          type: boolean
          example: true
        # authorize_code:
        #   type: string
        #   example: "12345"
        check_in_require:
          type: boolean
          example: true
        # check_in_code:
        #   type: string
        #   example: "49856"
        last_check_in:
          type: string
          example: ""
        thumbnail_image_name:
          type: string
          example: "thumb_image_name.ext"
        thumbnail_image_url:
          type: string
          example: "url.to.thumbnail_image/thumb_image_name.ext"
        image_name:
          type: string
          example: "image_name.ext"
        image_url:
          type: string
          example: "url.to.image/image_name.ext"
        validation_code:
          type: string
          example: "0e10bac5456f2b4bbc8b45ff0655dd5f5a88a334"
        validated:
          type: boolean
          example: true
        validation_date:
          type: string
          example: "1626804486653"
        password_change_date:
          type: string
          example: ""
        root:
          type: boolean
          example: false
        permissions:
          type: array
          example: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }]
        profiles:
          type: array
          example:
            [
              {
                _id: 789,
                name: "Profile name",
                permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
              },
            ]
        all_permissions: 
          type: array
          example: ["Permission alias"]
        active:
          type: boolean
          example: true
        last_login:
          type: string
          example: ""
        session_expire:
          type: string
          example: ""
        created_at:
          type: string
          example: "2021-07-20T17:52:11.067Z"
        updated_at:
          type: string
          example: "2021-07-20T18:08:06.657Z"
        deleted_at:
          type: string
          example: ""
        created_by:
          type: object
          example: { "_id": "60f71d402ab4842c6012c20z", "name": "Andrew Brown" }
        updated_by:
          type: object
          example:
            { "_id": "65f70d4acab4472c60a2c8ps", "name": "Marvel Williams" }
    UserToCreate:
      type: object
      properties:
        company_id:
          type: string
          example: "123456789098765432123456"
        account_id:
          type: string
          example: "12345678909876543212345A"
        name:
          type: string
          example: "Jack"
        first_surname:
          type: string
          example: "Smith"
        second_surname:
          type: string
          example: null
        gender:
          type: string
          example: "H"
        user_name:
          type: string
          example: "jack_2021@mail.com"
        password:
          type: string
          example: "Abc.123"
        authorize:
          type: boolean
          example: true
        authorize_code:
          type: string
          example: "12345"
        check_in_require:
          type: boolean
          example: true
        check_in_code:
          type: string
          example: "49856"
        root:
          type: boolean
          example: false
        permissions:
          type: array
          example: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }]
        profiles:
          type: array
          example:
            [
              {
                _id: 789,
                name: "Profile name",
                permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
              },
            ]
        active:
          type: boolean
          example: true
    EventToCreate:
      type: object
      properties:
        _id:
          type: string
          example: "123456789098765432123456"
        name_event:
          type: string
          example: "This is a new Event"
        type_event:
          type: enum
          example: "Education"
        size_event:
          type: enum
          example: "Mini"
        area_event:
          type: string
          example: "Stage 1"  
        day_start:
          type: date
          example: "2022-12-14 03:12"
        day_finish:
          type: date
          example: "2022-12-14 04:12"  
        status:
          type: boolean
          example: true 
    EventToUpdate:
      type: object
      properties:
        _id:
          type: string
          example: "123456789098765432123456"
        name_event:
          type: string
          example: "This is a new Event"
        type_event:
          type: enum
          example: "Education"
        size_event:
          type: enum
          example: "Mini"
        area_event:
          type: string
          example: "Stage 1"  
        day_start:
          type: date
          example: "2022-12-14 03:12"
        day_finish:
          type: date
          example: "2022-12-14 04:12"  
        status:
          type: boolean
          example: true     
    UserToUpdate:
      type: object
      properties:
        account_id:
          type: string
          example: "12345678909876543212345A"
        name:
          type: string
          example: "Jack"
        first_surname:
          type: string
          example: "Smith"
        second_surname:
          type: string
          example: null
        gender:
          type: string
          example: "H"
        user_name:
          type: string
          example: "jack_2021@mail.com"
        password:
          type: string
          example: ""
        authorize:
          type: boolean
          example: true
        authorize_code:
          type: string
          example: "12345"
        check_in_require:
          type: boolean
          example: true
        check_in_code:
          type: string
          example: "49856"
        root:
          type: boolean
          example: false
        permissions:
          type: array
          example: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }]
        profiles:
          type: array
          example:
            [
              {
                _id: 789,
                name: "Profile name",
                permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
              },
            ]
        active:
          type: boolean
          example: true
    UserDeleted:
      type: object
      properties:
        _id:
          type: string
          example: "60f70d4a2ab4442c6012c8cd"
    ResetPassword:
      type: object
      properties:
        password:
          type: string
          example: ""
    UserChekIn:
      type: object
      properties:
        check_in_code:
          type: string
          example: "12345"
    UserAuthorizeValidate:
      type: object
      properties:
        authorize_code:
          type: string
          example: "12345"
        permissions:
          type: string
          description: |
            Is a array in json format with permissions id
  parameters:
    searchParam:
      name: search
      in: query
      schema:
        type: number
        default: ""
        description: Search matches in `search_fields` fields
    searchFieldsParam:
      name: search_fields
      in: query
      schema:
        type: array
        default:
          ["name", "first_surname", "second_surname", "gender", "user_name"]
        description: Find `search` matches in these fields
    orderParam:
      name: order
      in: query
      schema:
        type: string
        default: asc
        description: Order to get records (`asc` or `desc`)
    orderFieldParam:
      name: order_field
      in: query
      schema:
        type: string
        default: name
        description: Field to sort with the `order` value, it can be any property of the user model
    activeParam:
      name: active
      in: query
      description: Get an active (`true` or `1`), inactive (`false` or `0`) or all (`null`) users
      schema:
        type: boolean
        default: null
    rootParam:
      name: root
      in: query
      description: Get admin (`true` or `1`), non-admin (`false` or `0`) or all (`null`) users
      schema:
        type: boolean
        default: null
    exceptionsParam:
      name: exceptions
      in: query
      description: Array of ids to exclude users
      schema:
        type: array
        default: []
    limitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: number
        minimum: 1
        default: 10
    fromParam:
      name: from
      in: query
      description: Number of items to skip before returning the results
      schema:
        type: number
        minimum: 0
        default: 0

  responses:
    "200Captcha":
      description: Captcha generated correctly
      content:
        application/json:
          schema:
            description: Id of the captcha / route of the captcha image generated / text of the captcha
            type: obejct
            example:
              {
                "_id" : "61a79a6975819ae52fe49399",
                "img" : "data/captcha/61a79a6975819ae52fe49399.jpg",
                "base64Data": "iVBORw0KGgoAAAANSUhEUgAAAZAAAADICAYAAADGFbfiAA....."
              }


    "204Image":
      description: Image deleted
    "204User":
      description: User deleted
    "400":
      description: An error occurred
      content:
        application/json:
          schema:
            type: object
            example:
              $ref: "#/components/examples/Msgs"
    "400VCRP":
      description: No user found with recovery code
      content:
        application/json:
          schema:
            type: object
            example:
              $ref: "#/components/examples/Msgs"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            example:
              $ref: "#/components/examples/Msgs"
    "404":
      description: A user with the specified data was not found
      content:
        application/json:
          schema:
            type: object
            example:
              $ref: "#/components/examples/Msgs"
    "403":
      description: Permission denied
      content:
        application/json:
          schema:
            type: object
            example:
              $ref: "#/components/examples/Msgs"
    "410":
      description: User deleted
      content:
        application/json:
          schema:
            type: object
            example:
              $ref: "#/components/examples/Msgs"

  examples:
    Msgs: { msg: "", msg_es: "" }
    UserToken:
      {
        msg: "",
        msg_es: "",
        user:
          {
            _id: "",
            company_id: "",
            account_id: "",
            name: "",
            first_surname: "",
            second_surname: "",
            gender: "",
            user_name: "",
            thumbnail_image_name: "",
            thumbnail_image_url: "",
            image_name: "",
            image_url: "",
            validation_code: "",
            validated: true or false,
            validation_date: "",
            password_change_date: "",
            root: true or false,
            permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
            profiles:
              [
                {
                  _id: 789,
                  name: "Profile name",
                  permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
                },
              ],
            all_permissions: ["Permission alias"],
            active: true or false,
            last_login: "",
            session_expire: "",
            created_by: { _id: "", name: "" },
            updated_by: { _id: "", name: "" },
            created_at: "",
            updated_at: "",
            deleted_at: "",
          },
        token: "",
      }
    UserCode:
      {
        msg: "",
        msg_es: "",
        user:
          {
            _id: "",
            company_id: "",
            account_id: "",
            name: "",
            first_surname: "",
            second_surname: "",
            gender: "",
            user_name: "",
            thumbnail_image_name: "",
            thumbnail_image_url: "",
            image_name: "",
            image_url: "",
            validation_code: "",
            validated: true or false,
            validation_date: "",
            password_change_date: "",
            root: true or false,
            permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
            profiles:
              [
                {
                  _id: 789,
                  name: "Profile name",
                  permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
                },
              ],
            all_permissions: ["Permission alias"],
            active: true or false,
            last_login: "",
            session_expire: "",
            created_by: { _id: "", name: "" },
            updated_by: { _id: "", name: "" },
            created_at: "",
            updated_at: "",
            deleted_at: "",
          },
        code: "",
      }
    User:
      {
        msg: "",
        msg_es: "",
        user:
          {
            _id: "",
            company_id: "",
            account_id: "",
            name: "",
            first_surname: "",
            second_surname: "",
            gender: "",
            user_name: "",
            authorize: true,
            check_in_required: true,
            last_check_in: "",
            thumbnail_image_name: "",
            thumbnail_image_url: "",
            image_name: "",
            image_url: "",
            validation_code: "",
            validated: true or false,
            validation_date: "",
            password_change_date: "",
            root: true or false,
            permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
            profiles:
              [
                {
                  _id: 789,
                  name: "Profile name",
                  permissions: [{ _id: 123, name: "Permission name", alias: "Permission alias", alias_id: 1 }],
                },
              ],
            all_permissions: ["Permission alias"],
            active: true or false,
            last_login: "",
            session_expire: "",
            created_at: "",
            updated_at: "",
            deleted_at: "",
            created_by: { _id: "", name: "" },
            updated_by: { _id: "", name: "" },
          },
      }
    UserAuthorized:
      {
        msg: "",
        msg_es: "",
        user:
          {
            _id: "",
            name: "",
            first_surname: "",
            second_surname: "",
          }
      }
    Event:
      {
        msg: "",
        msg_es: "",
        event:
          {
            _id: "",
            name_event: "",
            type_event: "",
            size_event: "",
            area_event: "",
            day_start: "",
            day_finish: "",
            created_at: "",
            updated_at: "",
          },
      }  
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: x-token
